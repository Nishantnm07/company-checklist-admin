// Example backend (e.g., in server.js or a contacts route file)

const express = require('express');
const router = express.Router();

// This is a simplified example. In a real application, you'd interact with a database.
let contactsData = [
  { id: 1, name: 'Support Team', email: 'support@example.com', phone: '123-456-7890' },
  { id: 2, name: 'Sales Department', email: 'sales@example.com', phone: '098-765-4321' },
];
let nextId = 3; // For unique IDs in this example

// GET /api/admins/contacts - Get all contacts
router.get('/contacts', async (req, res) => {
    try {
        // SQL Query to select all contacts
        const [rows] = await pool.query('SELECT id, name, email, contact_number FROM admins');
        res.json(rows); // Send the retrieved rows as JSON
    } catch (error) {
        console.error('Error fetching contacts:', error);
        res.status(500).json({ message: 'Internal server error while fetching contacts.' });
    }
});

// POST /api/admins/contacts - Add a new contact
router.post('/contacts', async (req, res) => {
    const { name, email, phone } = req.body;

    // Basic server-side validation
    if (!name || !email || !phone) {
        return res.status(400).json({ message: 'Name, email, and contact_number are required.' });
    }

    try {
        // SQL Query to insert a new contact
        const sql = 'INSERT INTO admins (name, email, contact_number) VALUES (?, ?, ?)';
        const [result] = await pool.query(sql, [name, email, phone]);

        // Construct the new contact object to send back, including the generated ID
        const newContact = {
            id: result.insertId, // The ID generated by the database for the new row
            name,
            email,
            phone
        };
        res.status(201).json(newContact); // Respond with the newly created contact
    } catch (error) {
        console.error('Error adding contact:', error);
        // Handle specific errors like duplicate email if email is unique
        if (error.code === 'ER_DUP_ENTRY') { // MySQL specific error code for duplicate entry
            return res.status(409).json({ message: 'Contact with this email already exists.' });
        }
        res.status(500).json({ message: 'Internal server error while adding contact.' });
    }
});

module.exports = router;